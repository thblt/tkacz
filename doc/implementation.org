#+TITLE: Tkacz: Implementation

* Contents :TOC_1:noexport:
- [[#introduction][Introduction]]
- [[#a-simplified-version-of-the-problem][A simplified version of the problem]]
- [[#search][Search]]

* Introduction

This document complements the [[design.org][Tkacz design document]], but focuses on
implementation details rather than on the general behavior of the
program.  It specifically addresses the issue of implementing Tkacz'
data model, which should be implemented in two separate levels:

 - A general type system;
 - A specific data model, accessible and extensible by the user.

I suspect the design of Haskell ADTs make it necessary to implement
our typesystem on /top/ of them, because:

 - types must be, from the language's point of view, values, if we
   want them to be inspectable and extensible at runtime;
 - there shouldn't be a need to use a custom executable just to hack
   into the typesystem.

* Haskell implementation

An important goal is the open nature of the Tkacz structure.  But
open-ended doesn't mean we cannot provide reasonable defaults.

** The generic Entity

Entities /in general/ must do the following things:

 - Be displayed as a list.  Having a list means some common display
   format, whichever it is.
 - Be tested with predicates.

   A Predicate is a function that applies to a =Store= and an
   =Entity=, and returns a =Bool=.

 - Be shown as a =View=.

   A /View/ is type-dependant.  That is, the generic Entity only needs
   to expose a function to get a view for this specific type of
   Entity.

 - Be modified from an =Editor=.

   =Editor= here is an abstracted UI element.  It must be able to
   enumerate the fields in a =data= declaration, expose them as
   user-editable info, and so on.

   Like View, Editor is type-dependant, and thus not a concern of the
   /generic/ Entity type.

*** Implementing the generic entity

Since we need to list Entities, and we'd rather avoid heterogeneous
list, we need to define a =DefaultEntityDescriptor= type:

#+begin_src haskell
  data DefaultEntityDescriptor =
    DefaultEntityDescriptor {
    author :: Maybe String
    , title :: Maybe String
    , date :: Maybe Int }
#+end_src

This is a reasonable descriptor as a starting point, but we needn't
restrict ourselves to it.  So we define Entity as simply a typeclass
that can return a descriptor:

#+begin_src haskell
  class Entity a where
    entityId :: a -> Int
    entityDescriptor :: a -> d
#+end_src

It is the job of the Tkacz instance to constrain =d= to a usable type.

*** Working with Entity data

We read entities in a serialized form, either from a file or a
database and need to dispatch the serialized data to the corresponding
reader, then run this reader.  Entities have a text tag to identify
their type,

#+begin_src haskell
  class Entity a => Readable a where
    tkaczRead :: s -> Either ReadError a
#+end_src

Where =s= is any kind of serialized data (a lisp-esque stream in default
Tkacz).

**** ISSUES with this model

 - *Lost results*: Initial read will parse an Entity in full, generate
   a concrete Entity, build an =EntityDescriptor= from it and drop the
   parsing output, which is a bit sad and sounds stupid.  But there
   are no real solution, unless we create a complete disjunctive type
   /again/. This is important.

   Good solution: *DON'T do that*.

   1. Each entity is stored as a file that begins with a serialized
      description data, or stores this data in a separate file with a
      different extension. For example, =Michel Foucault (1040).card=
      could be accompanied by =.1040 Michel Foucault.dsc=.  The
      initial step reads the description data only.

   2. The viewer and the editor, if/when they're called, read the
      actual data and builds their various views from that, updating
      them accordingly.

   3. When an editor returns a modified data set, it gets stored back
      to disk and the description is updated accordingly.

   4. Special features that /need/ to work with fully read entities,
      because they're aware of their types, can still do so with
      =readEntity= and =updateEntity=.

 - Each reader is parameterized by an input format AND a output type,
   which means the total number of readers is =formats * types= ---
   potentially a lot.  Also, this means that an Entity type determines
   the kind of input it expects.  OR we're going to need some sort of
   canonical internal representation common to readers and editors and
   viewers.  This may be the best road.

 - By the way: readers must /consume/ their input somehow so extra
   data can be reported as error.

** Contexts

*** The INBOX

INBOX is a context of things that exist in no other contexts.  It is a
context for entities only.  It is part of default library, but not of
the core.

** General workflow

When starting =tkacz server=, Tkacz starts by reading its store db,
selecting the default or last context and building the list of (Int,
EntityDescriptor) before passing it to the UI, which is expected to
display a list.

* A simplified version of the problem

We work with the following "class hierarchy":

 - =Entity=
   - =Document=
     - =Article=
     - =Book=
   - =Person=
     - =NaturalPerson=
     - =LegalPerson=

Which is an oversimplification of the data model, but should be enough
to expose all the problems it causes.

** Problem set

*** Problem 1: what is it like to be a reprint of a reprint?

 - NAGEL, Thomas (1983) «Quel effet cela fait, d'être une chauve souris?»,
   /in Questions mortelles/, translated from English by P. Engel, Paris:
   PUF, pp. 391--405.

which is a translation of:

- NAGEL, Thomas (1979) "What is it Like to be a Bat?", /in Mortal Questions/
  Cambridge: Cambridge University Press.

which is a reprint of:

 - NAGEL, Thomas (1974): "What is it Like to be a Bat?", /The Philosophical Review/, 83 (4).

*** Problem 2: changing names

- BRUCE, Virginia (1967) "The Expression of Femininity in the Male", /J
  Sex Res/ 3 (2)
- PRINCE, Virginia (1973) "Sex vs Gender", in LAUB and GANDY (1973)

Both these articles are written by the same person

(LAUB and GANDY (1973) = /Proceedings of the Second Interdisciplinary
Symposium on Gender Dysphoria Syndrome/, Stanford, California: Stanford
University Medical Center.)

*** Problem 3: variants and scientific editions

 1. KANT, Immanuel, 1781, Critique of Pure Reason 1st ed.
 2. KANT, Immanuel, 1787, Critique of Pure Reason 2nd ed.
 3. KANT, Immanuel (author); Renaut, Alain (scientific editor,
    translator, notes, foreword): Critique de la raison pure.

(1) and (2) are the two versions of the text by Kant.  3. merges them
both in a single book with notes, foreword, etc.

*** Problem 4: Multipart works

 - Some works don't actually exist: Hume's /Treatise of Human Nature/ is
   made of three different books, but some editions merges some, or
   all, of these books: Create an =Entity/Document/Multipart= type.

*** Problem 5: Non-published works

Some works have not been originally published on papers:

 1. Conferences and lectures (Austin's /How to do things with words/,
    Goodman's /Facts, Fictions, Predictions/, Bourdieu's lectures at the
    Collège de France...)
 2. Ancient works (Plato, Aristotle...)

This requires a bit of subtlety in date assignment, but could be
reasonably easily solved:

 1. By using the =Entity/Document/Unpublished/Lecture= type to create an
    original instance.
 2. By allowing fuzzy dates, or date intervals.  This is better left
    for version 2 :)

*** Problem 6: consequences of relationships

If we attribute a =Book= to a =Person= with the =Author= relationship, it means that this person wrote that book, which is trivial because it's a defining relationship in the Book type, but it must also become a property of the person --- /ie/, the relationship has to have a corollary, but this corollary shouldn't (I think) have to be defined at the person's level.

There are multiple solutions for this:

 - we extend the type of Person with a "reverse relationship" =IsAuthorOf=.  This is not settable by the user, but is set when the forward relationship (=Author=) is attributed.


** Solution 2: Haskell ADTs + some lenses

*** Problem 1: resolving relationships

We may have an =authors= field with references to objects of different types, eg =NaturalPerson= and =LegalPerson=.  So the =readObject= function cannot have a clearly defined type, unless we create a massive disjunctive type like:

#+begin_src haskell
  data Something = SomeEntity Entity
                | SomeDocument Document
                | SomeArticle Article
                | SomeBook Book
                -- etc
#+end_src

and predicate functions of the form:

#+begin_src haskell
  isDocument :: Something -> Bool
  isDocument (SomeDocument _) = True
  isDocument (SomeBook _)     = True
  isDocument (SomeArticle _)  = True
  isDocument _ = False
#+end_src

This implies a horrible amount of boilerplate, but is not impossible

*** Data storage

* Search
